#!/usr/bin/env node

/**
 * Module dependencies.
 */

 const app = require('../app');
 const debug = require('debug')('clone-coding:server');
 const socketio = require('socket.io');
 const http = require('http');

 const {addUser, removeUser, getUser, getUsersInRoom} =require('../users.js');
 const WebSocket = require('ws')
 const server = http.createServer(app);
 const port = normalizePort(process.env.PORT || '3000');
 const router = require('../router')
//  const socket = new WebSocket(`ws://${window.location.host}`)
 app.set('port', port);
//  const logger = require('../config/logger');
 require('dotenv').config();
// const {Server} = require("socket.io")

const io = socketio(server);

io.on('connection', (socket) => {
  socket.on('join', ({name,room}, callback) => {
    const {error,user} = addUser({id:socket.id,name,room});

    if(error) return callback(error);

    socket.join(user.room);
  });
  socket.on('disconnect', () => {
    console.log('a user had left')
  })
});
app.use(router);

//   cors:{
//     origin:"*"},
// });


 /**
  * Get port from environment and store in Express.
  */

 


 /**
  * Create HTTP server.
  */
 

 const wss = new WebSocket.Server({server})
 function handleConnection (socket) {
   console.log(socket);
 }
 wss.on("connection",handleConnection);

 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
  
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   const port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 function onListening() {
  //  logger.info(`${port}번 포트에서 정상적으로 서버가 가동되었습니다.`);
   const addr = server.address();
   const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }