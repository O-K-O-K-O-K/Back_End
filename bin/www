#!/usr/bin/env node

/**
 * Module dependencies.
 */
//모듈 
const app = require('../app');
const http = require('http');
 const socketio = require('socket.io');
 const server = http.createServer(app);
 const { connection } = require('mongoose');
 const { isObject } = require('util');
 
 //라우터
 const debug = require('debug')('clone-coding:server');
 const webSocket = require('../socket')
 const { db } = require("../models/index");
const logger = require('../src/config/logger')

 const port = normalizePort(process.env.PORT || '3000');


 app.set('port', port);
 require('dotenv').config();



// app.use(router);

//   cors:{
//     origin:"*"},
// });


 /**
  * Get port from environment and store in Express.
  */

 


 /**
  * Create HTTP server.
  */
 

//  const wss = new WebSocket.Server({server})
//  function handleConnection (socket) {
//    console.log(socket);
//  }
//  wss.on("connection",handleConnection);

 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port, () => {
   logger.info(`${port} 포트에서 서버가 가동되었습니다😆`)
 });
 server.on('error', onError);
 server.on('listening', onListening);

  
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   const port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 function onListening() {
  //  logger.info(`${port}번 포트에서 정상적으로 서버가 가동되었습니다.`);
   const addr = server.address();
   const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }

